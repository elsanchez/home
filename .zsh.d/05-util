# util (zshrc) - Z shell (zsh) init script for shell utility functions
# Ron DuPlain <ron.duplain@espresso-labs.com>
#
# Set up shell utility functions.

function ship () {
    # Run export with same syntax, but only if the target exists.
    # usage: ship VARIABLE=value
    # similar to: export VARIABLE=value
    #
    # Note: this does not affect VARIABLE if target value does not exist.

    [[ $# -eq 0 ]] && return

    # Get the export statement.
    local STATEMENT=$1

    # Get the target of the statement (right-hand of equals sign).
    # There may be an easier way to do this, but the following works.
    # Get the length of the statement.
    local length=${#STATEMENT}
    # Find the index of the equals sign (0 if not found).
    local index=`expr index $STATEMENT =`
    [[ $index -eq 0 ]] && return 1
    let index=index+1
    local TARGET=$STATEMENT[$index,$length]

    # Determine if the target exists, and export if so.
    if [ -e $TARGET ]; then
        export $STATEMENT
    fi
    return 0
}

function receive () {
    # Run source with same syntax, but only if the target exists.
    # usage: receive path/to/file
    # similar to: source path/to/file
    #
    # Note: this does nothing if target file does not exist.
    # Overload: sendfile includes a receive command; this isn't it.

    [[ $# -eq 0 ]] && return

    [[ -f $1 ]] && source $1
}

function forhost () {
    # Run a given command if the current hostname matches the first argument.
    # usage: forhost host command args
    # similar to: command args (if current hostname matches forhost host arg)
    #
    # Note: this does nothing if current hostname does not match host arg.

    [[ $# -eq 0 ]] && return

    local TARGET_HOST=$1
    shift;
    [[ "`uname -n`" = "$TARGET_HOST" ]] && $@
}

function prune_colons () {
    # Clean colons in a colon-delimited PATH-like environment variable.
    # usage: prune_colons ENV
    # Note that ENV should be passed by name. For example:
    #        prune_colons PATH
    #        prune_colons LD_LIBRARY_PATH

    [[ $# -eq 0 ]] && return

    # Get the environment variable name.
    local ENVNAME=$1
    local ENV=${(P)ENVNAME}
    # In bash, this is ENV=${!ENVNAME}

    ENV=${ENV//::/:} # remove double colon
    ENV=${ENV//::/:} # remove double colon
    ENV=${ENV//::/:} # remove double colon
    ENV=${ENV//::/:} # remove double colon

    ENV=${ENV#:} # remove leading colon
    ENV=${ENV%:} # remove trailing colon

    # Restore the environment variable.
    export $ENVNAME=${ENV}
}

function _pend () {
    # Provide core of prepend and append functions.
    # usage: _pend pre ARGS
    # usage: _pend post ARGS

    local mode=$1
    shift;

    [[ $# -eq 0 ]] && return

    local ENVNAME=$1
    local ENV=${(P)ENVNAME}
    # In bash, this is ENV=${!ENVNAME}
    shift;

    # Get the arguments in TARGETS, in the right order.
    local TARGETS
    case $mode in
        "pre")
            # Reorder list, so first is prepended last, LIFO.
            TARGETS=""
            for value in $@; do
                TARGETS="$value $TARGETS"
            done
            ;;
        *)
            TARGETS=$@
            ;;
    esac

    # Assume current working directory if no target is given.
    if [ -z "$TARGETS" ]; then
        TARGETS=`pwd`
    fi

    for target in ${=TARGETS}; do
        # Verify new target exists before prepending it.
        if [ -e $target ]; then
            # Add target while removing previous entries matching target.
            # Tack on colons, for pattern matching below.
            ENV=:${ENV}:
            [[ $mode == "pre" ]] && ENV=$target:${ENV//:$target:/:}
            [[ $mode == "post" ]] && ENV=${ENV//:$target:/:}:$target
        fi
    done

    export $ENVNAME=${ENV}
    prune_colons $ENVNAME
}

function prepend () {
    # Prepend each argument to a :-delimited environment variable, LIFO.
    # usage: prepend ENV NEWVALUE1 [NEWVALUE2, NEWVALUE3, ...]
    # Note that ENV should be passed by name. For example:
    #        prepend PATH /usr/bin /bin
    #        prepend LD_LIBRARY_PATH /usr/lib /lib
    #
    # Last in, first out (LIFO) suggests NEWVALUE1 prepends after NEWVALUE2.
    # Note: arguments are prepended if and only if the path exists.
    #
    # To do: consider a -f flag for forcing arguments that don't exist.

    _pend pre $@
}

function append () {
    # Append each argument to a :-delimited environment variable, FIFO.
    # usage: prepend ENV NEWVALUE1 [NEWVALUE2, NEWVALUE3, ...]
    # Note that ENV should be passed by name. For example:
    #        prepend PATH /usr/bin /bin
    #        prepend LD_LIBRARY_PATH /usr/lib /lib
    #
    # Last in, first out (LIFO) suggests NEWVALUE1 prepends after NEWVALUE2.
    # Note: arguments are prepended if and only if the path exists.
    #
    # To do: consider a -f flag for forcing arguments that don't exist.

    _pend post $@
}
